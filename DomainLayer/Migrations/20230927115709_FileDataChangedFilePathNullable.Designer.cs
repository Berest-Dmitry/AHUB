// <auto-generated />
using System;
using DomainLayer.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DomainLayer.Migrations
{
    [DbContext(typeof(AHUBContext))]
    [Migration("20230927115709_FileDataChangedFilePathNullable")]
    partial class FileDataChangedFilePathNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DomainLayer.Models.FileData", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("bucketName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("dateTimeAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("fileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("filePath")
                        .HasColumnType("text");

                    b.Property<string>("fileSize")
                        .HasColumnType("text");

                    b.Property<string>("mediaType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("FileData", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.PasswordChanges", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("changePasswordBefore")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("dateTimeAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("keyValidBefore")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("passwordChangeTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("recoveryKey")
                        .HasColumnType("integer");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("PasswordChanges", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.Post", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("dateTimeAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("geoTag")
                        .HasColumnType("text");

                    b.Property<string>("linkName")
                        .HasColumnType("text");

                    b.Property<string>("linkURL")
                        .HasColumnType("text");

                    b.Property<string>("publisherName")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("userId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("userId");

                    b.ToTable("Posts", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.PostFile", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("dateTimeAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("fileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("postId")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("postId");

                    b.ToTable("PostFiles");
                });

            modelBuilder.Entity("DomainLayer.Models.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("dateTimeAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("deletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("educationInfo")
                        .HasColumnType("text");

                    b.Property<string>("firstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<short?>("gender")
                        .HasColumnType("smallint");

                    b.Property<string>("hashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("homeTown")
                        .HasColumnType("text");

                    b.Property<string>("jobInfo")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("DomainLayer.Models.PasswordChanges", b =>
                {
                    b.HasOne("DomainLayer.Models.User", "user")
                        .WithMany("PasswordChanges")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("DomainLayer.Models.Post", b =>
                {
                    b.HasOne("DomainLayer.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DomainLayer.Models.PostFile", b =>
                {
                    b.HasOne("DomainLayer.Models.Post", "Post")
                        .WithMany("PostFiles")
                        .HasForeignKey("postId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("DomainLayer.Models.Post", b =>
                {
                    b.Navigation("PostFiles");
                });

            modelBuilder.Entity("DomainLayer.Models.User", b =>
                {
                    b.Navigation("PasswordChanges");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
